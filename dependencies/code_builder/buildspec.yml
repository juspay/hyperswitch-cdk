version: 0.2

phases:
  build:
    commands:
       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin https://$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
       - |
        PULL_FROM_DOCKER=("grafana/grafana" "grafana/loki" "grafana/promtail" "kiwigrid/k8s-sidecar" "grafana/fluent-bit-plugin-loki" "nginx" "juspaydotin/hyperswitch-router" "juspaydotin/hyperswitch-producer" "juspaydotin/hyperswitch-consumer" "juspaydotin/hyperswitch-control-center" "juspaydotin/hyperswitch-web" "bitnami/metrics-server" "istio/proxyv2" "istio/pilot")
        PULL_FROM_AWS=("eks/aws-load-balancer-controller" "ebs-csi-driver/aws-ebs-csi-driver" "eks-distro/kubernetes-csi/external-provisioner" "eks-distro/kubernetes-csi/external-attacher" "eks-distro/kubernetes-csi/external-snapshotter/csi-snapshotter" "eks-distro/kubernetes-csi/livenessprobe" "eks-distro/kubernetes-csi/external-resizer" "eks-distro/kubernetes-csi/node-driver-registrar" "ebs-csi-driver/volume-modifier-for-k8s")

        repository_exists() {
          local repo_name="$1"
          aws ecr describe-repositories --repository-names "$repo_name" >/dev/null 2>&1
        }

        for IMAGE in "${PULL_FROM_DOCKER[@]}"; do
          REPO_NAME="$IMAGE"
          if ! repository_exists "$REPO_NAME"; then
              aws ecr create-repository --repository-name "$REPO_NAME" --image-scanning-configuration scanOnPush=true
          fi
        done

        for IMAGE in "${PULL_FROM_AWS[@]}"; do
          REPO_NAME="$IMAGE"
          if ! repository_exists "$REPO_NAME"; then
              aws ecr create-repository --repository-name "$REPO_NAME" --image-scanning-configuration scanOnPush=true
          fi
        done

        for IMAGE in "${PULL_FROM_DOCKER[@]}"; do
          if [[ $IMAGE == "juspaydotin/hyperswitch-router" || $IMAGE == "juspaydotin/hyperswitch-producer" || $IMAGE == "juspaydotin/hyperswitch-consumer" ]]; then
              docker pull "$IMAGE:v1.111.0-standalone" && \
              docker tag "$IMAGE:v1.111.0-standalone" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.111.0-standalone" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.111.0-standalone"
          elif [[ $IMAGE == "juspaydotin/hyperswitch-control-center" ]]; then
              docker pull "$IMAGE:v1.33.0" && \
              docker tag "$IMAGE:v1.33.0" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.33.0" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.33.0"
          elif [[ $IMAGE == "juspaydotin/hyperswitch-web" ]]; then
              docker pull "$IMAGE:v1.0.10" && \
              docker tag "$IMAGE:v1.0.10" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.0.10" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.0.10"
          elif [[ $IMAGE == "bitnami/metrics-server" ]]; then
              docker pull "$IMAGE:0.7.0" && \
              docker tag "$IMAGE:0.7.0" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:0.7.0"
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:0.7.0"
          elif [[ $IMAGE == "istio/proxyv2" || $IMAGE == "istio/pilot" ]]; then
              docker pull "$IMAGE:1.21.2" && \
              docker tag "$IMAGE:1.21.2" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.21.2"
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.21.2"
          elif [[ $IMAGE == "kiwigrid/k8s-sidecar" ]]; then
              docker pull "$IMAGE:1.19.2" && \
              docker tag "$IMAGE:1.19.2" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.19.2"
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.19.2"
          else
              docker pull "$IMAGE" && \
              docker tag "$IMAGE" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:latest" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:latest"
          fi
        done

        for IMAGE in "${PULL_FROM_AWS[@]}"; do
          if [[ $IMAGE == "eks/aws-load-balancer-controller" ]]; then
            docker pull public.ecr.aws/$IMAGE:v2.7.1
            docker tag public.ecr.aws/$IMAGE:v2.7.1 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.7.1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.7.1
          elif [[ $IMAGE == "ebs-csi-driver/aws-ebs-csi-driver" ]]; then
            docker pull public.ecr.aws/$IMAGE:v1.28.0
            docker tag public.ecr.aws/$IMAGE:v1.28.0 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.28.0
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.28.0
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-provisioner" ]]; then
            docker pull public.ecr.aws/$IMAGE:v4.0.0-eks-1-29-5
            docker tag public.ecr.aws/$IMAGE:v4.0.0-eks-1-29-5 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v4.0.0-eks-1-29-5
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v4.0.0-eks-1-29-5
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-attacher" ]]; then
            docker pull public.ecr.aws/$IMAGE:v4.5.0-eks-1-29-5
            docker tag public.ecr.aws/$IMAGE:v4.5.0-eks-1-29-5 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v4.5.0-eks-1-29-5
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v4.5.0-eks-1-29-5
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-snapshotter/csi-snapshotter" ]]; then
            docker pull public.ecr.aws/$IMAGE:v7.0.0-eks-1-29-5
            docker tag public.ecr.aws/$IMAGE:v7.0.0-eks-1-29-5 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v7.0.0-eks-1-29-5
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v7.0.0-eks-1-29-5
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/livenessprobe" ]]; then
            docker pull public.ecr.aws/$IMAGE:v2.12.0-eks-1-29-5
            docker tag public.ecr.aws/$IMAGE:v2.12.0-eks-1-29-5 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.12.0-eks-1-29-5
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.12.0-eks-1-29-5
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-resizer" ]]; then
            docker pull public.ecr.aws/$IMAGE:v1.10.0-eks-1-29-5
            docker tag public.ecr.aws/$IMAGE:v1.10.0-eks-1-29-5 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.10.0-eks-1-29-5
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.10.0-eks-1-29-5
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/node-driver-registrar" ]]; then
            docker pull public.ecr.aws/$IMAGE:v2.10.0-eks-1-29-5
            docker tag public.ecr.aws/$IMAGE:v2.10.0-eks-1-29-5 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.10.0-eks-1-29-5
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.10.0-eks-1-29-5
          elif [[ $IMAGE == "ebs-csi-driver/volume-modifier-for-k8s" ]]; then
            docker pull public.ecr.aws/$IMAGE:v0.2.1
            docker tag public.ecr.aws/$IMAGE:v0.2.1 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v0.2.1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v0.2.1
          fi
        done

