version: 0.2

phases:
  pre_build:
    commands:
      - echo "Installing Helm..."
      - curl -fsSL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
      - mv linux-amd64/helm /usr/local/bin/
      - helm version
      - |
        echo "Fetching loki-stack chart to extract compatible versions..."
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        LATEST_VERSION=$(helm search repo grafana/loki-stack -o json | jq -r '.[0].version')
        echo "Using loki-stack chart version: $LATEST_VERSION"
        helm pull grafana/loki-stack --version $LATEST_VERSION --untar
        cd loki-stack
        LOKI_TAG=$(cat ./charts/loki/Chart.yaml | grep "^appVersion:" | awk '{print $2}' | tr -d '"')
        PROMTAIL_TAG=$(cat ./charts/promtail/Chart.yaml | grep "^appVersion:" | awk '{print $2}' | tr -d '"')
        GRAFANA_TAG=$(cat ./charts/grafana/Chart.yaml | grep "^appVersion:" | awk '{print $2}' | tr -d '"')
        cd ..
        export LOKI_TAG=${LOKI_TAG:-latest}
        export PROMTAIL_TAG=${PROMTAIL_TAG:-latest}
        export GRAFANA_TAG=${GRAFANA_TAG:-latest}

  build:
    commands:
       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin https://$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
       - |
        PULL_FROM_DOCKER=("grafana/grafana" "grafana/loki" "grafana/promtail" "kiwigrid/k8s-sidecar" "grafana/fluent-bit-plugin-loki" "nginx" "juspaydotin/hyperswitch-router" "juspaydotin/hyperswitch-producer" "juspaydotin/hyperswitch-consumer" "juspaydotin/hyperswitch-control-center" "juspaydotin/hyperswitch-web" "bitnami/metrics-server" "istio/proxyv2" "istio/pilot")
        PULL_FROM_AWS=("eks/aws-load-balancer-controller" "ebs-csi-driver/aws-ebs-csi-driver" "eks-distro/kubernetes-csi/external-provisioner" "eks-distro/kubernetes-csi/external-attacher" "eks-distro/kubernetes-csi/external-snapshotter/csi-snapshotter" "eks-distro/kubernetes-csi/livenessprobe" "eks-distro/kubernetes-csi/external-resizer" "eks-distro/kubernetes-csi/node-driver-registrar" "ebs-csi-driver/volume-modifier-for-k8s")

        repository_exists() {
          local repo_name="$1"
          aws ecr describe-repositories --repository-names "$repo_name" >/dev/null 2>&1
        }

        for IMAGE in "${PULL_FROM_DOCKER[@]}"; do
          REPO_NAME="$IMAGE"
          if ! repository_exists "$REPO_NAME"; then
              aws ecr create-repository --repository-name "$REPO_NAME" --image-scanning-configuration scanOnPush=true
          fi
        done

        for IMAGE in "${PULL_FROM_AWS[@]}"; do
          REPO_NAME="$IMAGE"
          if ! repository_exists "$REPO_NAME"; then
              aws ecr create-repository --repository-name "$REPO_NAME" --image-scanning-configuration scanOnPush=true
          fi
        done

        for IMAGE in "${PULL_FROM_DOCKER[@]}"; do
          if [[ $IMAGE == "juspaydotin/hyperswitch-router" || $IMAGE == "juspaydotin/hyperswitch-producer" || $IMAGE == "juspaydotin/hyperswitch-consumer" ]]; then
              docker pull "$IMAGE:v1.116.0-standalone" && \
              docker tag "$IMAGE:v1.116.0-standalone" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.116.0-standalone" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.116.0-standalone"
          elif [[ $IMAGE == "juspaydotin/hyperswitch-control-center" ]]; then
              docker pull "$IMAGE:v1.37.3" && \
              docker tag "$IMAGE:v1.37.3" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.37.3" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.37.3"
          elif [[ $IMAGE == "juspaydotin/hyperswitch-web" ]]; then
              docker pull "$IMAGE:v0.125.0" && \
              docker tag "$IMAGE:v0.125.0" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v0.125.0" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v0.125.0"
          elif [[ $IMAGE == "bitnami/metrics-server" ]]; then
              docker pull "$IMAGE:0.7.2" && \
              docker tag "$IMAGE:0.7.2" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:0.7.2"
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:0.7.2"
          elif [[ $IMAGE == "istio/proxyv2" || $IMAGE == "istio/pilot" ]]; then
              docker pull "$IMAGE:1.25.0" && \
              docker tag "$IMAGE:1.25.0" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.25.0"
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.25.0"
          elif [[ $IMAGE == "grafana/grafana" ]]; then
              docker pull "$IMAGE:${GRAFANA_TAG}" && \
              docker tag "$IMAGE:${GRAFANA_TAG}" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:${GRAFANA_TAG}" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:${GRAFANA_TAG}"
          elif [[ $IMAGE == "grafana/loki" ]]; then
              docker pull "$IMAGE:${LOKI_TAG}" && \
              docker tag "$IMAGE:${LOKI_TAG}" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:${LOKI_TAG}" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:${LOKI_TAG}"
          elif [[ $IMAGE == "grafana/promtail" ]]; then
              docker pull "$IMAGE:${PROMTAIL_TAG}" && \
              docker tag "$IMAGE:${PROMTAIL_TAG}" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:${PROMTAIL_TAG}" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:${PROMTAIL_TAG}"
          elif [[ $IMAGE == "kiwigrid/k8s-sidecar" ]]; then
              docker pull "$IMAGE:1.30.3" && \
              docker tag "$IMAGE:1.30.3" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.30.3"
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:1.30.3"
          else
              docker pull "$IMAGE" && \
              docker tag "$IMAGE" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:latest" && \
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:latest"
          fi
        done

        for IMAGE in "${PULL_FROM_AWS[@]}"; do
          if [[ $IMAGE == "eks/aws-load-balancer-controller" ]]; then
            docker pull public.ecr.aws/$IMAGE:v2.12.0
            docker tag public.ecr.aws/$IMAGE:v2.12.0 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.12.0
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.12.0
          elif [[ $IMAGE == "ebs-csi-driver/aws-ebs-csi-driver" ]]; then
            docker pull public.ecr.aws/$IMAGE:v1.41.0
            docker tag public.ecr.aws/$IMAGE:v1.41.0 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.41.0
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.41.0
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-provisioner" ]]; then
            docker pull public.ecr.aws/$IMAGE:v5.2.0-eks-1-32-10
            docker tag public.ecr.aws/$IMAGE:v5.2.0-eks-1-32-10 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v5.2.0-eks-1-32-10
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v5.2.0-eks-1-32-10
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-attacher" ]]; then
            docker pull public.ecr.aws/$IMAGE:v4.8.1-eks-1-32-10
            docker tag public.ecr.aws/$IMAGE:v4.8.1-eks-1-32-10 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v4.8.1-eks-1-32-10
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v4.8.1-eks-1-32-10
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-snapshotter/csi-snapshotter" ]]; then
            docker pull public.ecr.aws/$IMAGE:v8.2.1-eks-1-32-10
            docker tag public.ecr.aws/$IMAGE:v8.2.1-eks-1-32-10 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v8.2.1-eks-1-32-10
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v8.2.1-eks-1-32-10
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/livenessprobe" ]]; then
            docker pull public.ecr.aws/$IMAGE:v2.15.0-eks-1-32-10
            docker tag public.ecr.aws/$IMAGE:v2.15.0-eks-1-32-10 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.15.0-eks-1-32-10
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.15.0-eks-1-32-10
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/external-resizer" ]]; then
            docker pull public.ecr.aws/$IMAGE:v1.13.2-eks-1-32-10
            docker tag public.ecr.aws/$IMAGE:v1.13.2-eks-1-32-10 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.13.2-eks-1-32-10
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v1.13.2-eks-1-32-10
          elif [[ $IMAGE == "eks-distro/kubernetes-csi/node-driver-registrar" ]]; then
            docker pull public.ecr.aws/$IMAGE:v2.13.0-eks-1-32-10
            docker tag public.ecr.aws/$IMAGE:v2.13.0-eks-1-32-10 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.13.0-eks-1-32-10
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v2.13.0-eks-1-32-10
          elif [[ $IMAGE == "ebs-csi-driver/volume-modifier-for-k8s" ]]; then
            docker pull public.ecr.aws/$IMAGE:v0.5.1
            docker tag public.ecr.aws/$IMAGE:v0.5.1 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v0.5.1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE:v0.5.1
          fi
        done
